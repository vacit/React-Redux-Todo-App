{"version":3,"sources":["actions/actions.js","actionCreators/actionCreaters.js","Todo.js","TodoList.js","AddTodo.js","RemoveAll.js","Filters.js","App.js","serviceWorker.js","reducer/reducer.js","store.js","index.js"],"names":["SET_FILTER","SET_TODOS","ADD_TODO","REMOVE_TODO","SHOW_NOTIFICATON","HIDE_NOTIFICATION","addTodo","todo","dispatch","text","type","setTimeout","ItemButton","styled","div","connect","removeTodo","id","props","content","itemClass","checked","className","onClick","onCheckedToggle","e","stopPropagation","TodoList","this","title","todos","length","map","key","React","Component","defaultProps","AddTodo","state","inputVal","changeInput","bind","newVal","target","value","setState","event","preventDefault","onTodoAdd","onAdd","onSubmit","onChange","RemoveAll","onRemoveAll","options","label","labelKey","Filters","console","log","option","changeFilter","activeFilter","newFilter","setFilter","App","filterTodos","filterType","filter","removeAllTodos","toggleCompleteStatus","localTodos","window","localStorage","getItem","JSON","parse","addTodos","prevProps","prevState","snapshot","stringify","setItem","newTodo","Math","random","removeItem","newArr","currentTodo","notificationVisibility","style","notificationText","setTodos","Boolean","location","hostname","match","rootReducer","action","concat","newTodos","store","createStore","reducer","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b49c48e.chunk.js","sourcesContent":["export const SET_FILTER = 'SET_FILTER';\r\nexport const SET_TODOS  = 'SET_TODOS';\r\nexport const ADD_TODO   = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const SHOW_NOTIFICATON  = 'SHOW_NOTIFICATION';\r\nexport const HIDE_NOTIFICATION  = 'HIDE_NOTIFICATION';","import {SET_FILTER,\r\n    SET_TODOS, ADD_TODO, REMOVE_TODO,\r\n    SHOW_NOTIFICATON,\r\n    HIDE_NOTIFICATION} from \"../actions/actions\";\r\n\r\nexport function setFilter(newFilter){\r\n    return {type: SET_FILTER, activeFilter: newFilter}\r\n}\r\n\r\nexport function setTodos(todos){\r\n    return {type: SET_TODOS, todos}\r\n}\r\n\r\nexport function addTodo(todo){\r\n    return (dispatch) => {\r\n        dispatch({type: ADD_TODO, todo});\r\n        dispatch(showNotification(\"Eklendi\"));\r\n}}\r\n\r\nexport function removeTodo(id){\r\n    return {type: REMOVE_TODO, id}\r\n}\r\n\r\nexport function showNotification(text){\r\n    return (dispatch) => {\r\n        dispatch({type: SHOW_NOTIFICATON, text});\r\n        setTimeout(() => {\r\n            dispatch(hideNotification());\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nexport function hideNotification() {\r\n    return {type: HIDE_NOTIFICATION}\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {setFilter, removeTodo} from \"./actionCreators/actionCreaters\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ItemButton = styled.div`\r\n    background: red;\r\n    position: relative;\r\n    > span {\r\n        position: absolute;\r\n    } \r\n`;\r\n\r\n\r\nfunction Todo(props) {\r\n    const {content, id, checked} = props;\r\n    let itemClass= \"todo-item\";\r\n    if(checked){\r\n        itemClass += \" checked\";\r\n    }\r\n    return (\r\n        <ItemButton className={itemClass} onClick={() => {props.onCheckedToggle(id);}}>\r\n            {content}\r\n            <span\r\n                className=\"remove-todo\"\r\n                onClick={(e) => {e.stopPropagation();props.removeTodo(id)}}>X</span>\r\n        </ItemButton>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeTodo: (id) => {dispatch(removeTodo(id))}\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Todo);\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport Todo from './Todo';\r\n\r\n\r\nclass TodoList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"todo-list\">\r\n                <h3>{this.props.title} <span>{this.props.todos.length}</span>\r\n                </h3>\r\n                {\r\n                    this.props.todos.map((todo) => {\r\n                        return <Todo\r\n                            {...todo}\r\n                            key={todo.id}\r\n                            onCheckedToggle={this.props.onCheckedToggle}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodoList.propTypes = {\r\n  title: PropTypes.string\r\n};\r\n\r\nTodoList.defaultProps = {\r\n    title: \"Başlık\"\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\n\r\nclass AddTodo extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inputVal: \"\"\r\n        };\r\n        this.changeInput = this.changeInput.bind(this);\r\n        this.addTodo = this.addTodo.bind(this);\r\n    }\r\n\r\n    changeInput(e){\r\n        const newVal = e.target.value;\r\n        this.setState({\r\n            inputVal: newVal\r\n        });\r\n    }\r\n\r\n    addTodo(event){\r\n        event.preventDefault();\r\n        this.props.onTodoAdd(this.state.inputVal);\r\n        this.setState({\r\n            inputVal: \"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {onAdd} = this.props;\r\n        return <form\r\n            onSubmit={this.addTodo}>\r\n            <input\r\n                type=\"text\"\r\n                value={this.state.inputVal}\r\n                onChange={this.changeInput} />\r\n            <button>Ekle</button>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\n\r\nclass RemoveAll extends React.Component {\r\n    render() {\r\n        return <button className=\"remove-all\" onClick={() => {this.props.onRemoveAll()}}>\r\n                Tümünü Sil\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default RemoveAll;\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {setFilter} from \"./actionCreators/actionCreaters\";\r\n\r\nconst options = [\r\n    {label: \"Hepsi\", labelKey: \"all\"},\r\n    {label: \"Tamamlanmış\", labelKey: \"completed\"},\r\n    {label: \"Tamamlanmamış\", labelKey: \"uncompleted\"}\r\n];\r\n\r\nclass Filters extends Component {\r\n    render() {\r\n        console.log(this.props);\r\n        return <div>\r\n            {\r\n                options.map((option) => {\r\n                    return <div onClick={() => {\r\n                        this.props.changeFilter(option.labelKey);\r\n                    }}>\r\n                        {option.label}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeFilter: state.activeFilter\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: (newFilter) => {dispatch(setFilter(newFilter))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filters);","import React, {Component} from 'react';\r\nimport TodoList from \"./TodoList\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport RemoveAll from \"./RemoveAll\";\r\nimport \"./App.scss\";\r\nimport Filters from \"./Filters\";\r\nimport {connect} from \"react-redux\";\r\nimport {setFilter, setTodos, addTodo, showNotification, hideNotification} from \"./actionCreators/actionCreaters\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.removeAllTodos = this.removeAllTodos.bind(this);\r\n    this.toggleCompleteStatus = this.toggleCompleteStatus.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n      console.log(\"GÜncel proplar\", this.props);\r\n    // Component oluştuktan sonra gerekli olan datayı localstoragedan geyiriyoruz.\r\n    let localTodos = window.localStorage.getItem(\"todos\");\r\n    if(localTodos){\r\n      localTodos  = JSON.parse(localTodos);\r\n    }\r\n    this.props.addTodos(localTodos || []);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n      if(JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)){\r\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos))\r\n      }\r\n  }\r\n\r\n    addTodo(newTodo){\r\n      this.props.addTodo({\r\n          content: newTodo,\r\n          id: Math.random(),\r\n          checked: false\r\n      });\r\n  }\r\n\r\n  removeAllTodos(){\r\n    this.setState({\r\n        todos: []\r\n    }, () => {\r\n        window.localStorage.removeItem(\"todos\");\r\n    })\r\n  }\r\n\r\n  toggleCompleteStatus(id){\r\n      // Map ile mevcut todolar arasında döngüye girip, değiştirmek istediğimi farklı şekilde dönüyorum.\r\n      // Aradığım itemin checked statusunu değiştiriyorum, rest ile kopyalayarak yani mutate etmeden.\r\n      // Diğer elemanları olduğu gibi dönüyorum, \"return todo\";\r\n      const newArr = this.state.todos.map((todo) => {\r\n          if(id === todo.id){\r\n              let currentTodo = {...todo};\r\n              currentTodo.checked = !currentTodo.checked;\r\n              return currentTodo;\r\n          }else{\r\n              return todo;\r\n          }\r\n      });\r\n      this.setState({\r\n          todos: newArr\r\n      }, () => {\r\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n      });\r\n  }\r\n\r\n  filterTodos = (todos, filterType) => {\r\n    if(filterType === \"all\"){\r\n        return todos;\r\n    }else if (filterType === \"completed\"){\r\n        return todos.filter((todo) => todo.checked);\r\n    }else{\r\n        return todos.filter((todo) => !todo.checked);\r\n    }\r\n  }\r\n\r\n  render(){\r\n      console.log(\"App props\", this.props);\r\n    return (\r\n        <div className=\"App\" id=\"todo\">\r\n            {\r\n                this.props.notificationVisibility &&  <div style={{\"background\": \"black\", \"color\": \"white\", \"padding\": \"15px\", \"fontSize\": \"20px\"}}>\r\n                    {this.props.notificationText}\r\n                </div>\r\n            }\r\n            <div className=\"todo-list todo-list-add\">\r\n                <h3>Todo Ekle / Sil</h3>\r\n                <div>\r\n                    <AddTodo   onTodoAdd={this.addTodo} />\r\n                    <RemoveAll onRemoveAll={this.removeAllTodos}/>\r\n                    <Filters />\r\n                </div>\r\n            </div>\r\n            <TodoList\r\n                todos={this.filterTodos(this.props.todos, this.props.activeFilter)}\r\n                onCheckedToggle={this.toggleCompleteStatus} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  activeFilter: state.activeFilter,\r\n  todos: state.todos,\r\n  notificationVisibility: state.notificationVisibility,\r\n  notificationText: state.notificationText\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTodos: (todos) => {dispatch(setTodos(todos))},\r\n    addTodo: (todo) => {dispatch(addTodo(todo))},\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, SHOW_NOTIFICATON, HIDE_NOTIFICATION} from \"../actions/actions\";\r\n\r\nconst rootReducer = function (state = {\r\n    activeFilter: \"all\",\r\n    todos: [],\r\n    notificationVisibility: false,\r\n    notificationText: \"\"\r\n}, action) {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return {...state, activeFilter: action.activeFilter};\r\n        case SET_TODOS:\r\n            return {...state, todos: action.todos}\r\n        case ADD_TODO:\r\n            return {...state, todos: state.todos.concat([action.todo])}\r\n        case REMOVE_TODO:\r\n            const newTodos = state.todos.filter((todo) => todo.id !== action.id);\r\n            return {\r\n                ...state,\r\n                todos: newTodos\r\n            };\r\n        case SHOW_NOTIFICATON:\r\n            return {\r\n                ...state,\r\n                notificationVisibility: true,\r\n                notificationText: action.text\r\n            }\r\n        case HIDE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notificationVisibility: false,\r\n                notificationText: \"\"\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default rootReducer","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer/reducer';\r\n\r\nconst store = createStore(reducer, compose(\r\n    applyMiddleware(thunk),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n));\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider, connect} from \"react-redux\";\r\nimport store  from \"./store\";\r\n\r\nconst ProvideApp = (props) => <Provider store={store}><App /></Provider>\r\nReactDOM.render(<ProvideApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}